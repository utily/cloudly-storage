import * as storage from "./index"

describe("Continuable", () => {
	const array = [1, 2, 3, 4, 5, 6, 7, 8, 9]
	it("is", async () => {
		const continuable = storage.Continuable.create(array, "abcd")
		expect(storage.Continuable.is(continuable)).toEqual(true)
		expect(storage.Continuable.is(array)).toEqual(true)
	})
	it("hasCursor", async () => {
		const continuable = storage.Continuable.create(array, "abcd")
		expect(storage.Continuable.hasCursor(continuable)).toEqual(true)
		expect(storage.Continuable.hasCursor(array)).toEqual(false)
	})
	it("map", async () => {
		const continuable = storage.Continuable.create(array, "abcd")
		const r = continuable.map(Math.sqrt)
		expect(storage.Continuable.is(r)).toEqual(true)
		expect(storage.Continuable.hasCursor(r)).toEqual(true)
		expect(r[0] == 1).toEqual(true)
		expect(r[3] == 2).toEqual(true)
		expect(r[8] == 3).toEqual(true)
	})
	it("map + map", async () => {
		const continuable = storage.Continuable.create(array, "abcd")
		const r0 = continuable.map(Math.sqrt)
		expect(r0).toMatchSnapshot()
		expect((r0 as any).cursor).toEqual("abcd")
		const r1 = r0.map(i => i * i)
		expect(r1).toMatchSnapshot()
		expect((r1 as any).cursor).toEqual("abcd")
	})
	it("filter", async () => {
		const continuable = storage.Continuable.create(array, "abcd")
		const r = continuable.filter(v => v % 2 == 0)
		expect(storage.Continuable.is(r)).toEqual(true)
		expect(storage.Continuable.hasCursor(r)).toEqual(true)
		expect(
			r.every(item => {
				return item % 2 == 0
			})
		).toEqual(true)
	})
	it("slice", async () => {
		const continuable = storage.Continuable.create(array, "abcd")
		const r = continuable.slice(1, 4)
		expect(storage.Continuable.is(r)).toEqual(true)
		expect(storage.Continuable.hasCursor(r)).toEqual(true)
		expect(r.length == 3).toEqual(true)
	})
	it("splice", async () => {
		const continuable = storage.Continuable.create(array, "abcd")
		const continuable2 = storage.Continuable.create(array, "abce")
		const continuable3 = storage.Continuable.create(array, "abcf")
		const continuable4 = storage.Continuable.create(array, "abcg")
		const r = continuable.splice(1)
		const r2 = continuable2.splice(1, 4)
		const r3 = continuable3.splice(1, 4, 1.2, 2.2)
		const r4 = continuable4.splice(0, continuable4.length)
		expect(storage.Continuable.is(r)).toEqual(true)
		expect(storage.Continuable.hasCursor(r)).toEqual(true)
		expect(storage.Continuable.is(r2)).toEqual(true)
		expect(storage.Continuable.hasCursor(r2)).toEqual(true)
		expect(storage.Continuable.is(r3)).toEqual(true)
		expect(storage.Continuable.hasCursor(r3)).toEqual(true)
		expect(storage.Continuable.is(r4)).toEqual(true)
		expect(storage.Continuable.hasCursor(r4)).toEqual(true)
		expect(r.length == 0).toEqual(true)
		expect(continuable.length == array.length).toEqual(true)
		expect(r2.length == 4).toEqual(true)
		expect(continuable2.length == array.length - 4).toEqual(true)
		expect(r3.length == 4).toEqual(true)
		expect(continuable3.length == array.length - 2).toEqual(true)
		expect(r4.length == 9).toEqual(true)
		expect(continuable4.length == 0).toEqual(true)
	})
	it("concat", async () => {
		const continuable = storage.Continuable.create(array, "abcd")
		const continuable2 = storage.Continuable.create(array, "abce")
		const r = continuable.concat()
		const r2 = continuable.concat(1.1, 2.1, 3.1, 4.1)
		const r3 = continuable.concat(array)
		const r4 = continuable.concat(continuable2)
		const r5 = continuable.concat(array, continuable2, array)
		expect(storage.Continuable.is(r)).toEqual(true)
		expect(storage.Continuable.hasCursor(r)).toEqual(true)
		expect(storage.Continuable.is(r2)).toEqual(true)
		expect(storage.Continuable.hasCursor(r2)).toEqual(true)
		expect(storage.Continuable.is(r3)).toEqual(true)
		expect(storage.Continuable.hasCursor(r3)).toEqual(true)
		expect(storage.Continuable.is(r4)).toEqual(true)
		expect(storage.Continuable.hasCursor(r4)).toEqual(true)
		expect(storage.Continuable.is(r5)).toEqual(true)
		expect(storage.Continuable.hasCursor(r5)).toEqual(true)
		expect(r.length == array.length).toEqual(true)
		expect(r2.length == array.length + 4).toEqual(true)
		expect(r3.length == array.length * 2).toEqual(true)
		expect(r4.length == array.length * 2).toEqual(true)
		expect(r5.length == array.length * 4).toEqual(true)
	})
})
